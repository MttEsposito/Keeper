const{app,BrowserWindow,ipcMain}=require("electron"),{autoUpdater}=require("electron-updater"),cryptoJs=require("crypto-js"),fse=require("fs-extra"),{homedir,type,platform}=require("os"),{WindowsToaster}=require("node-notifier"),LOG=require("electron-log"),CONST={apiKey:`${type()}o${platform()}`,usersFile:"3d163b4626f322bc4afbae44eb95d0c493b6e995.txt",dataFile:"974dcc4343d3cfa28efd20a28f88f2da653052c3.txt",path:`${homedir()}`};class Electron{constructor(){}electronStart(){process.env.ELECTRON_DISABLE_SECURITY_WARNINGS="true",app.setMaxListeners(30),app.on("ready",()=>{LOG.info("app start"),this._createWindow(),setTimeout(()=>{LOG.info("check for update"),autoUpdater.checkForUpdates(),setInterval(()=>{this.isUpdating||(LOG.info("check for update"),autoUpdater.checkForUpdates())},3e5)},3e4)}),app.on("window-all-closed",()=>{"darwin"!==process.platform&&app.quit()}),app.on("activate",()=>{null===this.mainWindow&&this._createWindow()})}_createWindow(){LOG.info("create window");const a={width:850,height:600,minHeight:600,minWidth:850,webPreferences:{nodeIntegration:!0},icon:`${__dirname}/dist/keeper/assets/archive_icon.ico`};this.mainWindow=new BrowserWindow(a),this.mainWindow.loadFile(`${__dirname}/dist/keeper/index.html`),this.mainWindow.setMenu(null),this.mainWindow.webContents.openDevTools(),this.mainWindow.on("closed",()=>{this.mainWindow=null}),this._bindLinkUpdate(),this._bindEvents()}_bindEvents(){LOG.info("bind events UI - LOGIC");const a=new ElectronEvents;ipcMain.on("signIn",(b,c)=>{a.signIn(c).then(a=>b.sender.send("signReply",a)).catch(a=>b.sender.send("signReply",a))}),ipcMain.on("signUp",(b,c)=>{a.signUp(c).then(a=>b.sender.send("signUpReply",a)).catch(a=>b.sender.send("signUpReply",a))}),ipcMain.on("signOut",b=>{a.signOut().then(a=>b.sender.send("signOutReply",a)).catch(a=>b.sender.send("signOutReply",a))}),ipcMain.on("getUserData",(b,c)=>{a.getUsersData(c).then(a=>b.sender.send("getDataReply",a)).catch(a=>b.sender.send("getDataReply",a))}),ipcMain.on("addAccount",(b,c)=>{a.addAccount(c).then(a=>b.sender.send("actionReply",a)).catch(a=>b.sender.send("actionReply",a))}),ipcMain.on("editAccount",(b,c)=>{a.editAccount(c).then(a=>b.sender.send("actionReply",a)).catch(a=>b.sender.send("actionReply",a))}),ipcMain.on("removeAccount",(b,c)=>{a.removeAccount(c).then(a=>b.sender.send("actionReply",a)).catch(a=>b.sender.send("actionReply",a))}),ipcMain.on("changePassword",(b,c)=>{a.changePassword(c).then(a=>b.sender.send("changePswReply",a)).catch(a=>b.sender.send("changePswReply",a))}),ipcMain.on("quitAndUpdate",()=>{autoUpdater.quitAndInstall(!0,!0)}),ipcMain.on("getVersion",a=>{a.sender.send("versionReply",app.getVersion())})}_bindLinkUpdate(){LOG.info("bind update events"),autoUpdater.on("checking-for-update",()=>{LOG.info("checking-for-update")}),autoUpdater.on("update-available",()=>{this.isUpdating=!0,LOG.info("update-available")}),autoUpdater.on("download-progress",a=>{const b=a.percent.toFixed(1);LOG.info(`download-progress: ${b}%`)}),autoUpdater.on("update-not-available",()=>{LOG.info("update-not-available")}),autoUpdater.on("error",a=>{LOG.error(a)}),autoUpdater.on("update-downloaded",a=>{this.mainWindow.webContents.send("updateReadyToInstall",a),this._sendNotify("New keeper version","An update of keeper is ready to install"),LOG.info("update-downloaded")})}_sendNotify(a,b){LOG.info("create notification");const c=new WindowsToaster({withFallback:!1}),d={title:a,message:b,sound:!0,icon:`${__dirname}/dist/keeper/assets/archive_icon.png`,wait:!0,appID:"com.keeper.app"};c.notify(d)}}class ElectronEvents{constructor(){}async signOut(){try{return this._pswKey="",!0}catch(a){return!1}}async signIn(a){try{const b=new FsExtra,c=new CryptoJs,d=c.stringToMd5(a.password),e=await b.readFile(CONST.path,CONST.usersFile),f=c.decryptData(e.toString(),CONST.apiKey),g=JSON.parse(f),h=g.users.filter(b=>b.username==a.username&&b.password==d);return h.length?(this._pswKey=a.password,delete h[0].password,{result:!0,user:h[0]}):{result:!1}}catch(a){return{result:!1,errMessage:"Error occurred!!"}}}async signUp(a){try{const b=new FsExtra,c=new CryptoJs,d=await b.existFolder(CONST.path,CONST.usersFile);if(d){let d=await b.readFile(CONST.path,CONST.usersFile);d=d.toString()?d.toString():`{"users":[]}`,`{"users":[]}`!=d&&(d=c.decryptData(d,CONST.apiKey));const e=JSON.parse(d.toString());a.password=c.stringToMd5(a.password),a.uid=c.stringToMd5(new Date().toISOString()+a.password),e.users.push(a);const f=c.encryptData(JSON.stringify(e),CONST.apiKey);return await b.writeFile(CONST.path,CONST.usersFile,f),{result:!0}}else{await b.createFile(CONST.path,CONST.usersFile);const d=JSON.parse(`{"users":[]}`);a.password=c.stringToMd5(a.password),a.uid=c.stringToMd5(new Date().toISOString()+a.password),d.users.push(a);const e=c.encryptData(JSON.stringify(d),CONST.apiKey);return await b.writeFile(CONST.path,CONST.usersFile,e),{result:!0}}}catch(a){return{result:!1,errMessage:"Error occurred!!"}}}async getUsersData(a){try{const b=new FsExtra,c=new CryptoJs,d=`${a.uid}-${CONST.dataFile}`,e=await b.existFolder(CONST.path,d);if(e){let e=await b.readFile(CONST.path,d);e=e.toString()?e.toString():`{}`,`{}`!=e&&(e=c.decryptData(e,this._pswKey));const f=JSON.parse(e.toString()),g=f[a.uid]||[];return{result:!0,data:g}}return{result:!0,data:[]}}catch(a){return{result:!1,data:[]}}}async addAccount(a){try{const b=new FsExtra,c=new CryptoJs,d=`${a.user.uid}-${CONST.dataFile}`,e=await b.existFolder(CONST.path,d);if(e){let e=await b.readFile(CONST.path,d);e=e.toString(),e=c.decryptData(e,this._pswKey);const f=JSON.parse(e.toString());f[a.user.uid]?(a.value.uid=c.stringToMd5(new Date().toISOString()),f[a.user.uid].push(a.value)):(a.value.uid=c.stringToMd5(new Date().toISOString()),f[a.user.uid]=a.value);const g=c.encryptData(JSON.stringify(f),this._pswKey);return await b.writeFile(CONST.path,d,g),{result:!0,message:"Account saved!"}}else{let e={};a.value.uid=c.stringToMd5(new Date().toISOString()),e[a.user.uid]=[a.value];const f=c.encryptData(JSON.stringify(e),this._pswKey);return await b.writeFile(CONST.path,d,f),{result:!0,message:"Account saved!"}}}catch(a){return{result:!1,message:"Error account not saved!"}}}async editAccount(a){try{const b=new FsExtra,c=new CryptoJs,d=`${a.user.uid}-${CONST.dataFile}`;let e=await b.readFile(CONST.path,d);e=e.toString(),e=c.decryptData(e,this._pswKey);let f=JSON.parse(e.toString()),g=f[a.user.uid];for(let b in g)g[b].uid==a.uid&&(g[b]=a.value,g[b].uid=a.uid);const h=c.encryptData(JSON.stringify(f),this._pswKey);return await b.writeFile(CONST.path,d,h),{result:!0,message:"Account saved!"}}catch(a){return{result:!1,message:"Error account not saved!"}}}async removeAccount(a){try{const b=new FsExtra,c=new CryptoJs,d=`${a.user.uid}-${CONST.dataFile}`;let e=await b.readFile(CONST.path,d);e=e.toString(),e=c.decryptData(e,this._pswKey);const f=JSON.parse(e.toString()),g=f[a.user.uid].filter(b=>b.uid!=a.uid);f[a.user.uid]=g;const h=c.encryptData(JSON.stringify(f),this._pswKey);return await b.writeFile(CONST.path,d,h),{result:!0,message:"Account removed!"}}catch(a){return{result:!1,message:"Error account not removed!"}}}async changePassword(a){try{const b=new FsExtra,c=new CryptoJs;if(a.value.password==a.value.cpassword){const d=c.stringToMd5(a.value.cpassword),e=`${a.user.uid}-${CONST.dataFile}`,f=await b.existFolder(CONST.path,e);let g=null;if(f&&(g=await b.readFile(CONST.path,e),g=g.toString()?g.toString():`{}`,`{}`!=g)){g=c.decryptData(g,this._pswKey);const d=JSON.parse(g.toString()),f=c.encryptData(JSON.stringify(d),a.value.cpassword);await b.writeFile(CONST.path,e,f)}let h=await b.readFile(CONST.path,CONST.usersFile);const i=c.decryptData(h.toString(),CONST.apiKey),j=JSON.parse(i);for(let b of j.users)b.uid==a.user.uid&&(b.password=d);const k=c.encryptData(JSON.stringify(j),CONST.apiKey);return await b.writeFile(CONST.path,CONST.usersFile,k),this._pswKey=a.value.cpassword,{result:!0,message:"Password changed!"}}return{result:!1,message:"Password and confirm password not match!"}}catch(a){return{result:!1,message:"Error during change password!"}}}}class FsExtra{constructor(){}readFile(a,b){return fse.readFile(`${a}/Keeper-bin/${b}`)}writeFile(a,b,c){return fse.writeFile(`${a}/Keeper-bin/${b}`,c)}existFolder(a,b){return fse.pathExists(`${a}/Keeper-bin/${b}`)}createFile(a,b){return fse.createFile(`${a}/Keeper-bin/${b}`)}}class CryptoJs{constructor(){}encryptData(a,b){return cryptoJs.AES.encrypt(a,b)}decryptData(a,b){const c=cryptoJs.AES.decrypt(a,b);return c.toString(cryptoJs.enc.Utf8)}stringToMd5(a){return cryptoJs.MD5(a).toString()}}new Electron().electronStart();